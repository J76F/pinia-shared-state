{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/vanilla.ts"],"sourcesContent":["import { BroadcastChannel as BroadcastChannelImpl } from 'broadcast-channel'\r\nimport type { PiniaPluginContext } from 'pinia'\r\nimport { serialize } from './utils'\r\nimport type { Options } from './vanilla'\r\n\r\nfunction stateHasKey(key: string, $state: PiniaPluginContext['store']['$state']) {\r\n  return Object.keys($state).includes(key)\r\n}\r\n\r\n/**\r\n * Adds a `share` option to your store to share state across browser tabs.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * import { PiniaSharedState } from 'pinia-shared-state'\r\n *\r\n * // Pass the plugin to your application's pinia plugin\r\n * pinia.use(PiniaSharedState({ enable: true, initialize: false, type: 'localstorage' }))\r\n * ```\r\n *\r\n * @param options - Global plugin options.\r\n * @param options.enable - Enable/disable sharing of state for all stores.\r\n * @param options.initialize - Immediately recover the shared state from another tab.\r\n * @param options.type - 'native', 'idb', 'localstorage', 'node'.\r\n * @param options.serializer - Custom serializer to serialize store state before broadcasting.\r\n */\r\nexport function PiniaSharedState({\r\n  enable = true,\r\n  initialize = true,\r\n  type,\r\n  serializer,\r\n}: Options & { enable?: boolean }) {\r\n  return ({ store, options }: PiniaPluginContext) => {\r\n    const isEnabled = options?.share?.enable ?? enable\r\n    const omittedKeys = options?.share?.omit ?? []\r\n    if (!isEnabled)\r\n      return\r\n\r\n    const channel = new BroadcastChannelImpl(store.$id, {\r\n      type,\r\n    })\r\n\r\n    let timestamp = 0\r\n    let externalUpdate = false\r\n\r\n    const keysToUpdate = Object.keys(store.$state).filter(key => !omittedKeys.includes(key) && stateHasKey(key, store.$state))\r\n\r\n    channel.onmessage = (newState) => {\r\n      if (newState === undefined) {\r\n        channel.postMessage({\r\n          timestamp,\r\n          state: serialize(store.$state, serializer),\r\n        })\r\n        return\r\n      }\r\n\r\n      if (newState.timestamp <= timestamp)\r\n        return\r\n\r\n      externalUpdate = true\r\n      timestamp = newState.timestamp\r\n\r\n      store.$patch((state) => {\r\n        keysToUpdate.forEach((key) => {\r\n          state[key] = newState.state[key]\r\n        })\r\n      })\r\n    }\r\n\r\n    const shouldInitialize = options?.share?.initialize ?? initialize\r\n    if (shouldInitialize)\r\n      channel.postMessage(undefined)\r\n\r\n    store.$subscribe((_, state) => {\r\n      if (!externalUpdate) {\r\n        timestamp = Date.now()\r\n        channel.postMessage({\r\n          timestamp,\r\n          state: serialize(state, serializer),\r\n        })\r\n      }\r\n      externalUpdate = false\r\n    })\r\n  }\r\n}\r\n\r\nexport { share } from './vanilla'\r\n\r\ndeclare module 'pinia' {\r\n  // eslint-disable-next-line unused-imports/no-unused-vars\r\n  export interface DefineStoreOptionsBase<S, Store> {\r\n    /**\r\n     * Override global config.\r\n     *\r\n     * @example\r\n     *\r\n     * ```js\r\n     * defineStore({\r\n     *   id: 'counter',\r\n     *   state: () => ({ count: 0, name: 'John Doe' })\r\n     *   share: {\r\n     *     // An array of fields that the plugin will ignore.\r\n     *     omit: ['name'],\r\n     *     // Enable/disable sharing of state for this store.\r\n     *     enable: false\r\n     *     // If set to true this tab tries to immediately recover the\r\n     *     // shared state from another tab. Defaults to true.\r\n     *     initialize: false\r\n     *     // Serialize store state before broadcasting. Defaults to `JSON.stringify`/`JSON.parse`.\r\n     *     serializer: {\r\n     *      serialize: JSON.stringify\r\n     *      deserialize: JSON.parse\r\n     *     }\r\n     *   }\r\n     * })\r\n     * ```\r\n     */\r\n    share?: {\r\n      omit?: Array<keyof S>\r\n      enable?: boolean\r\n      initialize?: boolean\r\n    }\r\n  }\r\n}\r\n","export interface Serializer {\r\n  serialize: (value: any) => string\r\n  deserialize: (value: string) => any\r\n}\r\n\r\nexport function serialize(\r\n  obj: Record<string, unknown>,\r\n  serializer: Serializer = { serialize: JSON.stringify, deserialize: JSON.parse },\r\n) {\r\n  return serializer.deserialize(serializer.serialize(obj))\r\n}\r\n","import type { MethodType } from 'broadcast-channel'\r\nimport { BroadcastChannel as BroadcastChannelImpl } from 'broadcast-channel'\r\nimport type { Store } from 'pinia'\r\nimport { type Serializer, serialize } from './utils'\r\n\r\nexport interface Options {\r\n  initialize?: boolean\r\n  type?: MethodType\r\n  serializer?: Serializer\r\n}\r\n\r\n/**\r\n * Share state across browser tabs.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * import useStore from './store'\r\n *\r\n * const counterStore = useStore()\r\n *\r\n * share('counter', counterStore, { initialize: true })\r\n * ```\r\n *\r\n * @param key - A property of a store state.\r\n * @param store - The store the plugin will augment.\r\n * @param options - Share state options.\r\n * @param options.initialize - Immediately recover the shared state from another tab.\r\n * @param options.type - 'native', 'idb', 'localstorage', 'node'.\r\n * @param options.serializer - Custom serializer to serialize state before broadcasting.\r\n */\r\nexport function share<T extends Store, K extends keyof T['$state']>(\r\n  key: K,\r\n  store: T,\r\n  { initialize, serializer, type }: Options,\r\n): { sync: () => void, unshare: () => void } {\r\n  const channelName = `${store.$id}-${key.toString()}`\r\n\r\n  const channel = new BroadcastChannelImpl(channelName, {\r\n    type,\r\n  })\r\n  let externalUpdate = false\r\n  let timestamp = 0\r\n\r\n  store.$subscribe((_, state) => {\r\n    if (!externalUpdate) {\r\n      timestamp = Date.now()\r\n      channel.postMessage({\r\n        timestamp,\r\n        newValue: serialize(state, serializer)[key],\r\n      })\r\n    }\r\n    externalUpdate = false\r\n  })\r\n\r\n  channel.onmessage = (evt) => {\r\n    if (evt === undefined) {\r\n      channel.postMessage({\r\n        timestamp,\r\n        // @ts-expect-error: TODO\r\n        newValue: serialize(store.$state, serializer)[key],\r\n      })\r\n      return\r\n    }\r\n    if (evt.timestamp <= timestamp)\r\n      return\r\n\r\n    externalUpdate = true\r\n    timestamp = evt.timestamp\r\n    store[key] = evt.newValue\r\n  }\r\n\r\n  const sync = () => channel.postMessage(undefined)\r\n  const unshare = () => {\r\n    return channel.close()\r\n  }\r\n\r\n  if (initialize)\r\n    sync()\r\n\r\n  return { sync, unshare }\r\n}\r\n"],"mappings":"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","names":["import_broadcast_channel","BroadcastChannelImpl","BroadcastChannelImpl"]}